vagrant ssh-config > ~/vagrant-ssh-config
ssh -F ~/vagrant-ssh-config -L 5858:127.0.0.1:5858 default
rm ~/vagrant-ssh-config

#first terminal
cd /vagrant/app
export NODE_ENV=development
export NODE_SITE=development
export NODE_PATH=.
node-inspector

#second terminal
cd /vagrant/app
export NODE_ENV=development
export NODE_SITE=development
export NODE_PATH=.
supervisor --debug --ignore 'frontend/' server.js

#Links
http://daneden.github.io/animate.css/
http://jqueryvalidation.org/documentation/
https://github.com/chriso/validator.js
https://www.npmjs.org/package/i18n-2

http://geojsonlint.com/
http://mapbox.github.io/togeojson/
https://github.com/mapbox/togeojson
http://kalapun.com/blog/2014/03/13/gpx-to-geojson-in-mongodb-with-node-js/
https://github.com/tyrasd/osmtogeojson
http://gpx.lisss.ru/

Внутренние страницы
1. /projects
- список всех проектов
    - название проекта
    - дата создания
    - дата последнего редактирования
    - id проекта
    - кнопка удалить проект
    - теги каждого проекта
2. /project/id
- открыть проект в небольшом окне
- имя
- data проекта, с возможностью редактировать
- ссылки на проект
- расшарить проект
3. /account
- смена пароля, мыла
- ввод имени и прочее
4. /recentmap
    список недавно созданных карт
    должен опрашивать каждые 5 секунд, на предмет новой карты

#Размышления
0. За основу хранения информации по проекту, берем geojson.
таблица projects:
    _id: 123,
    dateCreate: <date>,
    lastModify: <date>,
    name: <name>,
    userId: <userId>, #может и не быть, если ее создал guest
    isPublic: true || false #только для проектов зарегестрированных пользователей
    protectedPassword: <protectCode> #защитить карту паролем
    type: "account" || "guest", # показывает, карта создана зарегестрированным юзером или гостем
    share: [
        {
            userId: <userId>,
            permission: {
                edit: true || false,
                clone: true || false,
                delete: true || false,
                share: true || false,
                protectCode: true || false,
                isPublic: true || false,
                name: true || false,
            }
        }
    ],
    layers: [
        {
            name: <name>,
            visible: true/false,
            id: <id>,
            parent: 0,
            position: 0,
            geojson: {
                 type: FeatureCollection,
                 properties : { description : "This is the geometry for..." },
                 features: [
                    {
                        type: "Feature",
                        geometry: {"type": "Point", "coordinates": [102.0, 0.5]},
                        properties: {
                            tags: ['music', 'cafe']
                        }
                    },
                    {
                        idFeature: <id>
                    }
                 ]
            }
        }
    ]

таблица фич аккаунта или public
{
    id: <id>,
    type: "Feature",
    geometry: {"type": "Point", "coordinates": [102.0, 0.5]},
    properties: {
        tags: ['music', 'cafe']
    },
    type: "account" || "public" || "guest",
    isVerification: true || false,  #для всех guest, будет false
    userId: <userId> - может и не быть, если ее создал guest
}

1. У каждого пользователя будут 3 типа видимости фич.
    - фичи для текущего проекта (1)
    - фичи расшаренные для всего аккаунта (2)
    - фичи расшаренные для всего сайта, в том числе и для незарегестрированных пользователей (3)

- При использовании фичи 2 или 3, в каком либо проекте, последующее изменение фичи, должно приводить к ее изменению и в проекте.
Тоесть по сути, в проекте, мы просто указываем линку на фичу.
- При удалении фичи из 2 или 3, она будет удалена и из (1), когда будет запрос на (1) и обнаруженно, что такой фичи уже нет.
- Если фича копируется то всегда спрашивать ее клонировать || линковать
  Если фича была склонирована то она отображается во всех layout

2. Юзер, расшарив фичу до паблика, может редактировать только свои фичи
3. Необходимо сделать удобный способ для редактирования фич публичных и аккаунта
   На данный момент юзер может редактировать их из какого-то существующего проекта, или из нового, еще не сохраненного проекта.
4. Всегда существует контекст, внутри которого мы редактируем фичи,
   тоесть на чарте, мы можем создавать и редатировать фичи ...
5. При загрузке проекта, для незарегистрированного юзера
    - подгружаeтся public layout
    - гость может создавать там фичи, но они будут неподтвержденными
    - если он использует, только что созданые им публичные фичи в своем текущем проекте, то они не могут линковаться к его проекту,
    должны только копироваться
    - пользователи состоящие в группе moderator, могут просматривать неподтвержденные публичные фичи, на предмет их
    редактирования и подтверждения
    - о каждой новой фиче, подтвержденной от зарегестрированного юзера, или от гостя, уведомлять на email
    - удалять публичную, подтвержденную фичу может только группа пользователей admin