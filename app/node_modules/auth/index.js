var passport = require('passport')
    , MemberModel = require('member/model/member')
    , LocalStrategy = require('passport-local').Strategy
    //, BasicStrategy = require('passport-http').BasicStrategy
    , logger = require('libs/log')(module)
    , config = require("config");

passport.serializeUser(function(id, done) {
    done(null, id);
});

passport.deserializeUser(function(id, done) {
    MemberModel.findById(id, function(err, member){
        done(err, member);
    })
});

/**
 * LocalStrategy
 *
 * This strategy is used to authenticate users based on a username and password.
 * Anytime a request is made to authorize an application, we must ensure that
 * a user is logged in before asking them to approve the request.
 */

passport.use(new LocalStrategy(
    function(username, password, done) {
        MemberModel.findOne({password: password}, function(err, member){
            if(err) return done(null, err);
            if(!member) return done(null, false);

            logger.info('LocalStrategy, member_id:' + member._id)
            return done(null, member._id);
        })
    }
));